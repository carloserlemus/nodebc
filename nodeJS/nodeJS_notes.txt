Node.JS Notes:

/Response Handling

The response object
    ->responses come in different formats.
        EX. JSON, HTML content... and more!
JSON (response.json)
    If we use response.json we can pass an object as a parameter.
    the .json method will transform it into a JSON.
    In addition it will add content-type application/json header. (?)

SEND FILE (response.sendFile)
    We can send any file. However, browsers can read specific file types.

    the tools we need to use .sendFile:
        path module, _dirname (a variable), and the filename.
        path.join, 

        path.join brings together _dirname and the filename.
        where _dirname is the current directory and filename.


-------------------------------------------------
unrelated
        alt shift f -- prettifies your code
        ctrl k + c -- to block comment
-------------------------------------------------

EXPRESS ROUTER (MODULE)
    This helps configure the routing in a more organized manner.
    By grouping them with regard to action or resource type

    It's similar to the way you can point an html file to the .js and .css files.

    express has a method called router which essentially replaces the app = express()

    The routing process goes: create the custom module using express.router(), export that module,
    mount the modules in your main .js file (usually index.)

-------------------------------------------------
STATUS AND ERROR HANDLING
    the RESPONSE has a METHOD called STATUS(ACCEPTS: NUMBER).
        STATUS can be chained with send.
            response.status(404).send('Server Error')

    Can we display a page if the user enters something entirely incorrect? Yes!

    app.use(function (req, res, next) {
        res.status(404).send("Sorry can't find that!")
    })

        app.use(function (err, req, res, next) {
            console.error(err.stack)
            res.status(500).send('Something broke!')
    })
-------------------------------------------------

MIDDLEWARE
    [function] has access to the objects: {request, response}.

    [request and response cycle] [the next function]

    within the req/res cycle the next function can chain middleware calls.
        What does chaining middleware calls mean?
    
    middleware gets three params, the req, res, and the next

    next, function within express router, executes middleware AFTER the current middleware.

    --REQUIRES MORE READING--

-------------------------------------------------
STATIC CONTENT

This helps us create a place to store content that doesn't change much.

Express has a static method that accepts one string parameter

app.use(express.static('public'));

    

            


    